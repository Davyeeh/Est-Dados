RELATÓRIO - IMPLEMENTAÇÃO DE PILHA ESTÁTICA

1. VISÃO GERAL
Esta implementação apresenta uma Pilha Estática com alocação sequencial usando lista Python. A estrutura segue o princípio LIFO (Last In, First Out) com capacidade máxima definida na criação.

2. ESTRUTURA PRINCIPAL

2.1 Classe PilhaEstatica
- Utiliza lista Python com tamanho fixo
- Controle através de índice do topo
- Medição de tempo de execução das operações

3. OPERAÇÕES IMPLEMENTADAS

3.1 Operações Básicas
- Inicialização: Cria pilha vazia com capacidade definida
- Empilha: Adiciona elemento no topo
- Desempilha: Remove elemento do topo
- Le_topo: Consulta elemento do topo sem remover

3.2 Operações de Verificação
- pilha_e_vazia(): Verifica se não há elementos
- pilha_e_cheia(): Verifica se atingiu capacidade máxima

3.3 Operações de Visualização
- imprimir(): Exibe elementos do topo à base
- imprimir_reversa(): Exibe elementos da base ao topo

3.4 Operações Especiais
- palindromo(): Verifica se uma string é palíndromo
- elimina(): Remove ocorrência específica
- pares_e_impares(): Separa elementos em duas pilhas
- liberar(): Limpa todos os elementos

4. LÓGICA DA IMPLEMENTAÇÃO

4.1 Controle de Elementos
- Índice topo (-1 indica pilha vazia)
- Lista com tamanho fixo (capacidade)
- Verificações de overflow/underflow

4.2 Manipulação
- Empilha: Incrementa topo e insere
- Desempilha: Remove e decrementa topo
- Usa pilha auxiliar quando necessário

4.3 Análise de Tempo
- Medição de tempo de execução
- Impressão dos tempos para análise de performance

5. COMPLEXIDADES
- Operações básicas: O(1)
- Operações de impressão: O(n)
- Operações especiais: O(n)

6. CARACTERÍSTICAS
- Alocação estática: tamanho fixo
- Acesso direto aos elementos
- Controle de capacidade máxima
- Medição de performance
